// GitHub: https://github.com/NooberPro/minecraft-discord-bot
// Crowdin: https://crowdin.com/project/minecraft-discord-bot
// English Translation (en) by NooberPro

{
  // Translation for the console output
  error: {
    playerEmbed: 'An error occurred while creating Player List Embeds Message.',
    statusEmbed: 'An error occurred while creating Status Embeds Message.',
    playerList: 'An error occurred while creating the Player List.',
    fetchServerDataAndPlayerList: 'Failed to fetch Minecraft Server Data and Player List.',
    fetchServerData: 'Failed to fetch Minecraft Server Data.',
    messageEdit: 'Error while editing the Status Message.',
    botLogin: 'Bot Login Error.',
    infoCmd: 'Error in Slash Command - Info.',
    motdCmd: 'Error in Slash Command - MOTD.',
    playerCmd: 'Error in Slash Command - Player.',
    statusCmd: 'Error in Slash Command - Status.',
    statusPrefix: 'Error in Prefix Command - Status.',
    setStatus: 'Failed to set Status Message.',
    autoReply: 'Error in Auto-Reply Feature.',
    botStatusUpdate: "Error in Updating the Bot's Status.",
    channelIdCheck: 'Error in Channel ID Check and Updating.',
    playerCountCh: 'Error in Player Count Channel Feature.',
    playerCountChNameUpdate: 'Error in Updating Player Count Channel Name.',
    playerCountChDateWrite: 'Error in Saving Player Count Channel ID in data.json.',
    playerAvatarGuildIdCheck: 'Error while checking Player Avatar Guild ID.',
    playerAvatarEmojiError: 'Error while managing player avatar emojis',
  },
  debug: {
    autoChangeStatus: {
      onlineText: 'Online with {playerOnline} Players Playing.',
      offlineText: '❌ Offline.',
      format: 'Status Embed Message has been updated to {statusText}.',
      // Use {channelName} fetches the name of the status message channel.
      successLog: 'Successfully set the status message in {channelName}.',
      // Use {cmd} retrieves the setstatus command.
      enableAutoChangeStatus: 'To set the server status, send a {cmd} command in the desired channel.',
      playerAvatarGuildSuccessFull: 'Guild: `{playerAvatarGuildName}` was successfully found and set as the server for Player Avatar emojis.',
      playerAvatarGuildUnSuccessFull: "The Player Avatar Emoji's guild with ID `{playerAvatarGuildID}` could not be found, or the bot is not in the guild.",
    },
    botStatusFormat: "Bot's activity has been updated to {botStatusText}.",
    playerCountChUpdate: 'Player Count channel name is updated to {updatedName}.',
  },
  checkErrorConfig: {
    checkConfigWait: 'Checking for Errors in the config.js file. Please wait.',
    followingErrors: 'Config file has the following errors:',
    botToken: 'Invalid Bot Token.',
    botPresenceStatus: "Invalid bot status options. Should be 'online', 'idle', 'dnd' or 'invisible'.",
    botStatusActivity: "Invalid bot activity options. Should be 'Playing', 'Listening','Watching' or 'Competing'",
    mcType: 'Invalid Minecraft server type. Should be "java" or "bedrock".',
    mcName: "The Minecraft server's name has not been specified.",
    mcVersion: "The Minecraft server's version has not been specified.",
    guildID: 'The Server/Guild ID has not been specified or is invalid.',
    timeZone: 'The time zone specified in the config file is not valid.',
    // Use {givenCmdName} retrieves the name given in the language file.
    // Use {cmdName} retrieves the name of commands.
    slashCmdName: 'The provided name "{givenCmdName}" for the "{cmdName}" command is invalid.\nPlease use only lowercase, uppercase, title case letters, numbers, underscores, and hyphens.',
    playerAvatarInvalidGuildId: 'The Guild Id of the Player Avatar Emoji Server has not been specified.',
  },
  playerCountCh: {
    // Use {guildID} represents the guild ID given in the config file.
    playerCountChGuildIncorrect: 'The guild with ID: "{guildID}" was not found, or the bot is not in the guild.',
    // Use {channelName} retrieves the created channel's name.
    playerCountChannelFound: 'Successfully found channel: {channelName} for Player Count.',
    // Use {channelId} retrieves the ID of the channel given in the config file.
    playerCountChannelNotFound: 'The channel for Player Count with ID: "{channelId}" was not found, or the bot has no access to the channel.',
    // Use {updatedStatus} to retrieve the updated status name of the channel.
    playerCountChannelCreated: 'Created a channel for Player Count and updated its name to: {updatedStatus}.',
  },

  // Use {botUserTag} for the bot's user tag, such as Bot#0001.
  // Use {inviteLink} for the bot's invite link.
  inviteLink: '✅ {botUserTag} is online.\nInvite the bot with {inviteLink}.',

  serverInfoStart: {
    // Variables: {ip}, {version}, {playersOnline}, {playersMax}, {motd_line1}, {motd_line2}
    // Use {motd_line1} to get the first line of the MOTD.
    // Use {motd_line2} to get the second line of the MOTD.
    online: [
      '--------------------------------------------------------',
      'IP       | {ip}',
      'VERSION  | {version}',
      'PLAYERS  | {playersOnline} / {playersMax}',
      'MOTD     | {motd_line1}',
      '         | {motd_line2}',
      '--------------------------------------------------------',
    ],
    // Variables: {ip}, {port}, {mcServerType}
    offline: [
      'Currently unable to locate the Minecraft server with:',
      '----------------------------------------------',
      'IP   | {ip}',
      'PORT | {port}',
      'TYPE | {mcServerType}',
      '----------------------------------------------',
    ],
  },
}
